for (i in 1:1000) {
p1<-new("door", chosenDoor=1,carDoor=1,switch=T,winner=F)
result<-PlayGame(p1)
yesSwitch<-c(yesSwitch,result)
}
noSwitch<-c()
for (i in 1:1000) {
p1<-new("door", chosenDoor=1,carDoor=1,switch=F,winner=F)
result<-PlayGame(p1)
noSwitch<-c(noSwitch,result)
}
table(yesSwitch)
table(noSwitch)
# Part 2: Moving On
# Define a new S4 class door.
setClass(Class="door",
representation = representation (
chosenDoor="numeric",
carDoor="numeric",
switch="logical"
),
prototype = prototype (
chosenDoor=c(),
carDoor=c(),
switch=c()
)
)
# A validation function that checks whether values stored in the slots are appropriately structured.
setValidity("door", function(object){
test1<-(object@chosenDoor==1 | object@chosenDoor==2 | object@chosenDoor==3)
test2<-(object@carDoor==1 | object@carDoor==2 | object@carDoor==3)
test3<-(object@switch==TRUE | object@switch==FALSE)
test<-(test1==TRUE & test2==TRUE & test3==TRUE)
if(test!=TRUE){return("@DoorChoice is not a valid value")}
}
)
# A construction function that allows the user to create a door object
setMethod("initialize", "door",  function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
# Create generic PlayGame
setGeneric("PlayGame", function(object="door"){
standardGeneric("PlayGame")
}
)
# creates PlayGame method for class door
setMethod("PlayGame", "door",
function(object){
winner<-FALSE
object@carDoor<-sample(1:3,1)
firstChosenDoor<-sample(1:3,1)
if (object@switch==FALSE){
object@chosenDoor<-firstChosenDoor
}
if (object@switch==TRUE){
temp<-FALSE
openDoor<-0
while(temp==FALSE){
openDoor<-sample(1:3,1)
if ((openDoor!=object@carDoor)&(openDoor!=firstChosenDoor)){
temp<-TRUE
}
}
if(openDoor==1){
choices<-c(2,3)
} else if (openDoor==2){
choices<-c(1,3)
} else if (openDoor==3){
choices<-c(1,2)
}
object@chosenDoor<-sample(choices,1)
}
if (object@chosenDoor==object@carDoor){
winner<-TRUE
} else {
winner<-FALSE
}
return(winner)
}
)
p1<-new("door", 1,1,F)
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
PlayGame(p1)
PlayGame(p1)
PlayGame(p1)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitch<-rep(FALSE,1000)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-c(rep(1,1000), rep(1,1000), rep(FALSE,1000))
sapply(noSwitchInput,PlayGame)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-c(rep(1,1000); rep(1,1000); rep(FALSE,1000))
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-as.dataframe(rep(1,1000))
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-as.data.frame(rep(1,1000))
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput$chosenDoor<-as.data.frame(rep(1,1000))
rm(noSwitchInput)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput$chosenDoor<-as.data.frame(rep(1,1000))
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-as.data.frame()
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitchInput<-as.data.frame(rep(1,1000))
dimnames(noSwitchInput)
dimnames(noSwitchInput)[[2]]
dimnames(noSwitchInput)[[2]]<-chosenDoor
dimnames(noSwitchInput)[[2]]<-"chosenDoor"
View(noSwitchInput)
noSwitchInput$carDoor<-(rep(1,1000))
# The function compareDoors takes 2 door choices (represented as integers) as input, doorChoice and doorCar.
# if doorChoice is equal to doorCar, the function returns TRUE. if they're not equal, function returns false.
compareDoors<-function(doorChoice, doorCar){
isSame<-FALSE
if (doorChoice==doorCar){
isSame<-TRUE
}
return(isSame)
}
# To test function,
compareDoors(1,1)   # returns TRUE
compareDoors(1,2)   # returns FALSE
# Part 2: Moving On
# Define a new S4 class door.
setClass(Class="door",
representation = representation (
chosenDoor="numeric",
carDoor="numeric",
switch="logical"
),
prototype = prototype (
chosenDoor=c(),
carDoor=c(),
switch=c()
)
)
# A validation function that checks whether values stored in the slots are appropriately structured.
setValidity("door", function(object){
test1<-(object@chosenDoor==1 | object@chosenDoor==2 | object@chosenDoor==3)
test2<-(object@carDoor==1 | object@carDoor==2 | object@carDoor==3)
test3<-(object@switch==TRUE | object@switch==FALSE)
test<-(test1==TRUE & test2==TRUE & test3==TRUE)
if(test!=TRUE){return("@DoorChoice is not a valid value")}
}
)
# A construction function that allows the user to create a door object
setMethod("initialize", "door",  function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
# Create generic PlayGame
setGeneric("PlayGame", function(object="door"){
standardGeneric("PlayGame")
}
)
# creates PlayGame method for class door
setMethod("PlayGame", "door",
function(object){
winner<-FALSE
object@carDoor<-sample(1:3,1)
firstChosenDoor<-sample(1:3,1)
if (object@switch==FALSE){
object@chosenDoor<-firstChosenDoor
}
if (object@switch==TRUE){
temp<-FALSE
openDoor<-0
while(temp==FALSE){
openDoor<-sample(1:3,1)
if ((openDoor!=object@carDoor)&(openDoor!=firstChosenDoor)){
temp<-TRUE
}
}
if(openDoor==1){
choices<-c(2,3)
} else if (openDoor==2){
choices<-c(1,3)
} else if (openDoor==3){
choices<-c(1,2)
}
object@chosenDoor<-sample(choices,1)
}
if (object@chosenDoor==object@carDoor){
winner<-TRUE
} else {
winner<-FALSE
}
return(winner)
}
)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitch<-c()
PlayNoSwitch<-function(){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
noSwitch<-c(noSwitch,result)
}
rm(PlayNoSwitch())
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
noSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
noSwitch<-c(noSwitch,result)
}
table(noSwitch)
noSwitchTable<-table(noSwitch)
noSwitchTable[1]
noSwitchTable[2]
noSwitchTable[2][1]
noSwitchTable[2][2]
noSwitchTable[2]/1000
table(noSwitch)
# 2) simulate 1000 rounds of the game, player does switches
yesSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
yesSwitch<-c(yesSwitch,result)
}
table(yesSwitch)
# 2) simulate 1000 rounds of the game, player does switches
yesSwitch<-c()
for (i in 1:1000){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
yesSwitch<-c(yesSwitch,result)
}
table(yesSwitch)
PlayNoSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
return(result)
}
noSwitch2<-sapply(c(1:1000),PlayNoSwitch)
table(noSwitch2)
# 2) simulate 1000 rounds of the game, player does switches
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
table(yesSwitch)
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
table(noSwitch)
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
table(yesSwitch)
?count.fields
prop.table(noSwitch)
table(noSwitch)
?table
print(a[1])
a<-table(yesSwitch)
print(a[1])
print(a[1]+"test")
paste(a[1]+"test")
paste(a[1],"test")
paste(a[1]/1000,"test")
tabNoSwitch<-table(noSwitch)
tabNoSwitch
perctWon<-tabNoSwitch[2]/1000*100
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who choose not to switch won ", perctWonNoSwitch, "% of the time.")
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
tabYesSwitch<-table(yesSwitch)
perctWonYesSwitch<-tabYesSwitch[2]/1000*100
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
# 2) simulate 1000 rounds of the game, player does switches
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
tabYesSwitch<-table(yesSwitch)
perctWonYesSwitch<-tabYesSwitch[2]/1000*100
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")
# Define a new S4 class door.
# Objects of class door contains an integer called chosenDoor (door chosen by the player), an integer called
# carDoor (door behind which a car is located), and a logical called switch (indiciating whether the player wants
# to switch doors).
setClass(Class="door",
representation = representation (
chosenDoor="numeric",
carDoor="numeric",
switch="logical"
),
prototype = prototype (
chosenDoor=c(),
carDoor=c(),
switch=c()
)
)
# A validation function that checks whether values stored in the slots are appropriately structured.
# The validation function ensures that the values stored in chosenDoor and carDoor are either 1, 2 or 3, and that
# the value stored in switch is either TRUE or FALSE.
setValidity("door", function(object){
test1<-(object@chosenDoor==1 | object@chosenDoor==2 | object@chosenDoor==3)
test2<-(object@carDoor==1 | object@carDoor==2 | object@carDoor==3)
test3<-(object@switch==TRUE | object@switch==FALSE)
test<-(test1==TRUE & test2==TRUE & test3==TRUE)
if(test!=TRUE){return("@DoorChoice is not a valid value")}
}
)
# A construction function that allows the user to create a door object
setMethod("initialize", "door",  function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
# Create generic PlayGame
setGeneric("PlayGame", function(object="door"){
standardGeneric("PlayGame")
}
)
# creates PlayGame method for class door.
# The method PlayGame takes as input an object door of class door, and returns winner, a boolean indicating
# whether or not the door that was finally chosen was the same as the door where the car is.
setMethod("PlayGame", "door",
function(object){
winner<-FALSE                   # sets winner to FALSE to begin with
object@carDoor<-sample(1:3,1)   # for the purposes of the simulation, randomly choose carDoor
firstChosenDoor<-sample(1:3,1)  # for the purposes of the simulation, randomly choose first door player
# chooses, firstChosenDoor
if (object@switch==FALSE){      # if player doesn't switch, her chosenDoor is firstChosenDoor
object@chosenDoor<-firstChosenDoor
}
if (object@switch==TRUE){       # if player switches,
temp<-FALSE
openDoor<-0
while(temp==FALSE){
openDoor<-sample(1:3,1)     # randomly choose a door to remove from consideration
if ((openDoor!=object@carDoor)&(openDoor!=firstChosenDoor)){    # this door to be removed cannot
# contain the car, and cannot be
# firstChosenDoor
temp<-TRUE
}
}
if(openDoor==1){
choices<-c(2,3)
} else if (openDoor==2){
choices<-c(1,3)
} else if (openDoor==3){
choices<-c(1,2)
}
object@chosenDoor<-sample(choices,1)    # The player randomly chooses between doors not removed.
}
if (object@chosenDoor==object@carDoor){   # Compare chosenDoor and carDoor. If they are the same,
# assign TRUE to winner
winner<-TRUE
} else {                                  # If they are not the same, assign FALSE to winner.
winner<-FALSE
}
return(winner)
}
)
# 1) Simulate 1000 rounds of the game, player does not switch
# Function PayNoSwitch takes in argument i. The function runs the playGame method i times with switch==FALSE.
# It returns result of playGame (TRUE if car behind final door chosen, FALSE if car not behind final door chosen).
PlayNoSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
return(result)
}
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
noSwitch<-sapply(c(1:1000),PlayNoSwitch)      # simulates the game 1,000 times, player does not switch.
tabNoSwitch<-table(noSwitch)                  # tabulates results.
perctWonNoSwitch<-tabNoSwitch[2]/1000*100     # calculates percentage of the time they win the car.
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")    # reports percentage won.
# 2) simulate 1000 rounds of the game, player does switches
# Function PayYesSwitch takes in argument i. The function runs the playGame method i times with switch==TRUE
# It returns result of playGame (TRUE if car behind final door chosen, FALSE if car not behind final door chosen).
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)    # simulates the game 1,000 times, player does not switch.
tabYesSwitch<-table(yesSwitch)                # tabulates results.
perctWonYesSwitch<-tabYesSwitch[2]/1000*100   # calculates percentage of the time they win the car.
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")       # reports percentage won.
install.packages("devtools")
install.packages("roxygen2")
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/PS5/Working Folder")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
## An example to make sure that the integrateIt method works for both Trapezoid and Simspon methods of calculation
x<-c(1,2,3,4,5,6,7,8,9)
y<-c(2,3,2,3,2,3,2,3,2)
d<-c(2,8)
testTrapezoid<-integrateIt(x,y,d,'Trap')
testSimpson<-integrateIt(x,y,d,'Simpson')
testTrapezoid
testSimpson
print(testTrapezoid)
print(testSimpson)
getArea(testTrapezoid)
## Intentional mistakes to test error messages
# sizes of vetor x and vector y are not the same
x<-c(1,2,3,4,5,6,7,8)
y<-c(2,3,2,3,2,3,2,3,2)
d<-c(2,8)
testTrapezoidError<-integrateIt(x,y,d,'Trap')
# vector x contains repeated elements
x<-c(1,2,6,6,6,6,6,8,9)
y<-c(2,3,2,3,2,3,2,3,2)
d<-c(2,8)
testSimpsonError<-integrateIt(x,y,d,'Simpson')
